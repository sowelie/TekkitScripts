-- Description: Nuclear Power Plant LCD Status Controller
-- Authors:     andersevenrud, larsmaehlum
-- URL:         https://github.com/andersevenrud/TekkitScripts

-- Configuration
clientId = 45
serverId = 47
sleepTimeout = 1

-- Peripherals
wlanOn        = true
wlanSide      = "bottom"
wlanTimeout   = 1
lcdScale      = 2.0
lcdSide       = "top"
lcd           = peripheral.wrap(lcdSide)

-- Internal variables
_running = true
_lcdWidth, _lcdHeight = lcd.getSize()

-- 
-- Helper Functions
-- 

function printl(msg, x, y)
  lcd.setCursorPos(x, y)
  lcd.write(msg)
end

function clearConsole()
  term.clear()
  term.setCursorPos(1, 1)
end

function clearLCD()
  lcd.clear()
  lcd.setCursorPos(1, 1)
end

function sendMessage(client, message)
  if wlanOn then
    if type(client) == "table" then
      for i = 1, #client do
        rednet.send(wlanSide, tonumber(client[i]), message)
      end
    else
      rednet.send(wlanSide, tonumber(client), message)
    end
  end
end

function handleMessage(message)
  clearLCD()
  printl("REACTOR STATUS SCREEN", 1, 1)

  local data = textutils.unserialize(message)
  if type(data) == "table" then
    local x = 2
    printl("         ", x, 2)
    printl("Enabled  ", x, 3)
    printl("Output   ", x, 4)
    printl("Heat     ", x, 5)
    printl("Coolant  ", x, 6)
    printl("Fuel     ", x, 7)
    printl("Depleted ", x, 8)

    x = 12
    for i = 1, #data do
      local contents = data[i].contents
      local info     = data[i].info
      local state    = data[i].state

      printl(string.format("#%d", i), x, 2)
      printl(tostring(state),         x, 3)
      printl(string.format("%d", info.output),             x, 4)
      printl(string.format("%d", info.heat),               x, 5)
      printl(string.format("%d", contents.coolant),        x, 6)
      printl(string.format("%d", contents.fuel),           x, 7)
      printl(string.format("%d", contents.depleted),       x, 8)

      x = x + 12
    end
  else
    printl("--- ERROR IN DATA TRANSMISSION --", 1, 3)
    print(data)
  end
end

-- 
-- Main program
-- 

clearConsole()
lcd.setTextScale(lcdScale)
clearLCD()

-- Startup
if wlanOn then
  rednet.open(wlanSide)
end

while _running do
  senderId, message, distance = rednet.receive(wlanTimeout)
  if senderId then
    -- print("#", senderId, " ", distance, "m ", #message, "b")
    -- if senderId == serverId then
      handleMessage(message)
    -- end
  end

  --os.sleep(sleepTimeout)
end

if wlanOn then
  rednet.close(wlanSide)
end
